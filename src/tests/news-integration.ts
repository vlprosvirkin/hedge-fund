import { NewsAPIAdapter } from '../adapters/news-adapter.js';
import type {
    DigestResponse,
    NewsItem,
    NewsSupportedTokensResponse
} from '../types/index.js';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ ‚Üí –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
 */
async function newsIntegrationTest() {
    const adapter = new NewsAPIAdapter();

    try {
        console.log('üöÄ Starting News API Integration Test...\n');

        // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        await adapter.connect();
        console.log('‚úÖ Connected to News API');

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        console.log('\nü™ô Step 1: Getting supported tokens...');
        const supportedTokens: NewsSupportedTokensResponse = await adapter.getSupportedTokens();

        console.log('‚úÖ Supported tokens received successfully');
        console.log(`   Primary assets: ${supportedTokens.primary_assets.length}`);
        console.log(`   Additional assets: ${supportedTokens.additional_assets.length}`);
        console.log(`   Total count: ${supportedTokens.total_count}`);

        if (supportedTokens.primary_assets.length > 0) {
            console.log(`   Primary assets: ${supportedTokens.primary_assets.map((a: any) => a.text).join(', ')}`);
        }

        // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        console.log('\nüì∞ Step 2: Getting general news digest...');
        const generalDigest: DigestResponse = await adapter.getDigest();

        console.log('‚úÖ General digest received successfully');
        console.log(`   News items: ${generalDigest.items.length}`);
        console.log(`   Total count: ${generalDigest.count}`);

        if (generalDigest.items.length > 0) {
            const latestNews = generalDigest.items[0];
            if (latestNews) {
                console.log(`   Latest news: ${latestNews.title.substring(0, 100)}...`);
                console.log(`   Source: ${latestNews.source}`);
                console.log(`   Assets: ${latestNews.assets.join(', ')}`);
            }
        }

        // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
        console.log('\nüîç Step 3: Testing news search...');
        const now = Date.now();
        const searchResults: NewsItem[] = await adapter.search('Bitcoin', now - 3600000, now);

        console.log('‚úÖ News search completed successfully');
        console.log(`   Search results: ${searchResults.length} items`);

        if (searchResults.length > 0) {
            const firstResult = searchResults[0];
            if (firstResult) {
                console.log(`   First result: ${firstResult.title.substring(0, 80)}...`);
                console.log(`   Sentiment: ${firstResult.sentiment?.toFixed(2) || 'N/A'}`);
                console.log(`   Published: ${new Date(firstResult.publishedAt).toLocaleString()}`);
            }
        }

        // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–∫—Ç–∏–≤—É
        console.log('\nüìä Step 4: Testing asset-specific news...');
        let assetDigest: DigestResponse | null = null;
        let assetNews: NewsItem[] = [];

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è BTC
        try {
            assetDigest = await adapter.getDigestByAsset('BTC', 5);
            console.log('‚úÖ BTC news digest received successfully');
            console.log(`   BTC news items: ${assetDigest.items.length}`);

            if (assetDigest.items.length > 0) {
                const btcNews = assetDigest.items[0];
                if (btcNews) {
                    console.log(`   Latest BTC news: ${btcNews.title.substring(0, 80)}...`);
                    console.log(`   Significance: ${btcNews.significance || 'N/A'}`);
                    console.log(`   Implications: ${btcNews.implications?.substring(0, 100) || 'N/A'}...`);
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è BTC news not available, trying ETH...');

            try {
                assetDigest = await adapter.getDigestByAsset('ETH', 5);
                console.log('‚úÖ ETH news digest received successfully');
                console.log(`   ETH news items: ${assetDigest.items.length}`);
            } catch (error2) {
                console.log('‚ö†Ô∏è ETH news not available, skipping asset-specific test...');
            }
        }

        // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        console.log('\nüìã Step 5: Getting latest news...');
        const latestNews: NewsItem[] = await adapter.getLatest(5);

        console.log('‚úÖ Latest news received successfully');
        console.log(`   Latest news count: ${latestNews.length}`);

        if (latestNews.length > 0) {
            const latest = latestNews[0];
            if (latest) {
                console.log(`   Most recent: ${latest.title.substring(0, 80)}...`);
                console.log(`   Sentiment: ${latest.sentiment?.toFixed(2) || 'N/A'}`);
                console.log(`   Source: ${latest.source}`);
            }
        }

        // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        console.log('\nüéØ Step 6: Testing news by tickers...');
        const tickerNews: NewsItem[] = await adapter.getNewsByTickers(['BTC', 'ETH'], 5);

        console.log('‚úÖ Ticker news received successfully');
        console.log(`   Ticker news count: ${tickerNews.length}`);

        if (tickerNews.length > 0) {
            const tickerNewsItem = tickerNews[0];
            if (tickerNewsItem) {
                console.log(`   Sample ticker news: ${tickerNewsItem.title.substring(0, 80)}...`);
                console.log(`   Sentiment: ${tickerNewsItem.sentiment?.toFixed(2) || 'N/A'}`);
            }
        }

        // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('\nüíæ Step 7: Testing caching functionality...');

        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        const firstDigest = await adapter.getDigest();
        console.log('‚úÖ First digest request completed');

        // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
        const secondDigest = await adapter.getDigest();
        console.log('‚úÖ Second digest request completed (should use cache)');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç)
        const cacheWorking = firstDigest.items.length === secondDigest.items.length;
        console.log(`   Cache test: ${cacheWorking ? '‚úÖ Working' : '‚ùå Not working'}`);

        // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîç Step 8: Data quality validation...');

        const dataQualityChecks = [
            {
                name: 'Supported Tokens Completeness',
                passed: supportedTokens.primary_assets.length > 0 || supportedTokens.additional_assets.length > 0,
                details: `Primary: ${supportedTokens.primary_assets.length}, Additional: ${supportedTokens.additional_assets.length}`
            },
            {
                name: 'General Digest Availability',
                passed: generalDigest.items.length >= 0,
                details: `Found ${generalDigest.items.length} general news items`
            },
            {
                name: 'Search Functionality',
                passed: searchResults.length >= 0,
                details: `Search returned ${searchResults.length} results`
            },
            {
                name: 'Latest News Availability',
                passed: latestNews.length >= 0,
                details: `Latest news: ${latestNews.length} items`
            },
            {
                name: 'Ticker News Functionality',
                passed: tickerNews.length >= 0,
                details: `Ticker news: ${tickerNews.length} items`
            },
            {
                name: 'Sentiment Analysis',
                passed: searchResults.length === 0 || (searchResults[0]?.sentiment !== undefined && searchResults[0].sentiment >= 0 && searchResults[0].sentiment <= 1),
                details: searchResults.length > 0 ? `Sentiment range: ${searchResults[0]?.sentiment?.toFixed(2) || 'N/A'}` : 'No results to check'
            }
        ];

        dataQualityChecks.forEach(check => {
            const status = check.passed ? '‚úÖ' : '‚ùå';
            console.log(`   ${status} ${check.name}: ${check.details}`);
        });

        const failedChecks = dataQualityChecks.filter(check => !check.passed);
        if (failedChecks.length > 0) {
            throw new Error(`Data quality validation failed: ${failedChecks.map(c => c.name).join(', ')}`);
        }

        // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        console.log('\n‚ö†Ô∏è Step 9: Testing error handling...');

        try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–∞
            await adapter.getDigestByAsset('INVALIDASSET123', 1);
            console.log('‚ö†Ô∏è Unexpected: Invalid asset request succeeded');
        } catch (error) {
            console.log('‚úÖ Error handling working: Invalid asset request properly rejected');
        }

        // 11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        console.log('\nüéØ Step 10: Integration verification...');

        const integrationChecks = [
            {
                name: 'API Connection',
                status: adapter.isConnected(),
                description: 'News API connection'
            },
            {
                name: 'Data Flow',
                status: true, // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏
                description: 'Data flow from API to processing'
            },
            {
                name: 'Cache System',
                status: cacheWorking,
                description: 'Caching functionality'
            },
            {
                name: 'Error Handling',
                status: true, // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                description: 'Proper error handling'
            }
        ];

        integrationChecks.forEach(check => {
            const status = check.status ? '‚úÖ' : '‚ùå';
            console.log(`   ${status} ${check.name}: ${check.description}`);
        });

        console.log('\nüéâ News API Integration Test PASSED!');
        console.log('\nüìä Summary:');
        console.log(`   - Supported tokens: ${supportedTokens.total_count} total`);
        console.log(`   - General news: ${generalDigest.items.length} items`);
        console.log(`   - Search results: ${searchResults.length} items`);
        console.log(`   - Latest news: ${latestNews.length} items`);
        console.log(`   - Ticker news: ${tickerNews.length} items`);
        console.log(`   - Data quality: ${dataQualityChecks.filter(c => c.passed).length}/${dataQualityChecks.length} checks passed`);

    } catch (error) {
        console.error('\n‚ùå News API Integration Test FAILED!');
        console.error('Error:', error);
        throw error;
    } finally {
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç API
        await adapter.disconnect();
        console.log('\nüîå Disconnected from News API');
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
    newsIntegrationTest()
        .then(() => {
            console.log('\n‚ú® News integration test completed successfully!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• News integration test failed!');
            console.error(error);
            process.exit(1);
        });
}

export { newsIntegrationTest };
