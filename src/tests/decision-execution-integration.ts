import { HedgeFundOrchestrator } from '../core/orchestrator.js';
import { AspisAdapter } from '../adapters/aspis-adapter.js';
import { Signals } from '../adapters/signals-adapter.js';
import { NewsAPIAdapter } from '../adapters/news-adapter.js';
import { AgentsService } from '../services/agents.js';
import { ConsensusService } from '../services/trading/consensus.js';
import { VerifierService } from '../services/trading/verifier.js';
import { OpenAIService } from '../services/ai/openai.service.js';
import type {
    SystemConfig,
    PipelineArtifact,
    Position,
    Order,
    TargetWeight,
    ConsensusRec
} from '../types/index.js';

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –ê–≥–µ–Ω—Ç—ã ‚Üí –ö–æ–Ω—Å–µ–Ω—Å—É—Å ‚Üí –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚Üí –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Aspis
 */
async function decisionExecutionIntegrationTest() {
    console.log('üöÄ Starting Decision-Execution Integration Test...\n');

    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        console.log('üîß Step 1: Initializing components...');

        const config: SystemConfig = {
            debateInterval: 30, // 30 seconds
            maxPositions: 5,
            riskProfile: 'neutral',
            rebalanceInterval: 3600,
            decisionThresholds: {
                averse: { buy: 0.15, sell: -0.15, minConfidence: 0.7, maxRisk: 0.3 },
                neutral: { buy: 0.1, sell: -0.1, minConfidence: 0.6, maxRisk: 0.5 },
                bold: { buy: 0.05, sell: -0.05, minConfidence: 0.5, maxRisk: 0.7 }
            },
            killSwitchEnabled: true
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
        const technicalAdapter = new Signals();
        const newsAdapter = new NewsAPIAdapter();
        // –°–æ–∑–¥–∞–µ–º AspisAdapter —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const aspisAdapter = new AspisAdapter();
        const agentsService = new AgentsService();

        // Mock services
        const mockMarketData = {
            connect: async () => console.log('‚úÖ Market data connected'),
            disconnect: async () => console.log('‚úÖ Market data disconnected'),
            getMarketStats: async (symbol: string) => ({
                symbol,
                volume24h: Math.random() * 1000000 + 100000,
                spread: Math.random() * 0.1 + 0.01,
                tickSize: 0.01,
                stepSize: 0.00001,
                minQty: 0.00001,
                maxQty: 1000000,
                timestamp: Date.now()
            })
        };

        const mockFactStore = {
            connect: async () => console.log('‚úÖ Fact store connected'),
            disconnect: async () => console.log('‚úÖ Fact store disconnected'),
            putNews: async (news: any[]) => console.log(`‚úÖ Stored ${news.length} news articles`),
            findEvidence: async (ticker: string, params: any) => [
                {
                    id: `evidence-${ticker}`,
                    ticker,
                    quote: `Sample evidence for ${ticker}`,
                    relevance: 0.8,
                    timestamp: Date.now() - 3600000,
                    source: 'test'
                }
            ],
            getNewsByIds: async (ids: string[]) => []
        };

        const mockUniverse = {
            connect: async () => console.log('‚úÖ Universe service connected'),
            disconnect: async () => console.log('‚úÖ Universe service disconnected'),
            getUniverse: async (params: any) => ['ETH', 'ARB'] // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–ª–∞–Ω—Å–µ
        };

        const mockRiskService = {
            connect: async () => console.log('‚úÖ Risk service connected'),
            disconnect: async () => console.log('‚úÖ Risk service disconnected'),
            checkLimits: async (params: any) => ({
                ok: true,
                violations: [],
                warnings: []
            })
        };

        const technicalIndicators = technicalAdapter;

        console.log('‚úÖ All components initialized');

        // 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
        console.log('\nüîå Step 2: Connecting to services...');

        await Promise.all([
            newsAdapter.connect(),
            aspisAdapter.connect(),
            agentsService.connect()
        ]);

        console.log('‚úÖ All services connected');

        // 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        console.log('\nüéº Step 3: Creating orchestrator...');

        // Create OpenAI service
        const openaiService = new OpenAIService();

        const orchestrator = new HedgeFundOrchestrator(
            config,
            mockMarketData as any,
            aspisAdapter,
            newsAdapter,
            mockFactStore as any,
            mockUniverse as any,
            agentsService,
            mockRiskService as any,
            technicalIndicators,
            openaiService
        );

        console.log('‚úÖ Orchestrator created');

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        console.log('\nüìä Step 4: Checking current positions...');

        const initialPositions = await aspisAdapter.getPositions();
        console.log(`‚úÖ Current positions: ${initialPositions.length}`);

        initialPositions.forEach(position => {
            console.log(`   ${position.symbol}: ${position.quantity} @ $${position.avgPrice}`);
        });

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        console.log('\nüí∞ Step 5: Checking account info...');

        const accountInfo = await aspisAdapter.getAccountInfo();
        console.log(`‚úÖ Account total value: $${accountInfo.totalValue.toLocaleString()}`);
        console.log(`   Available balance: $${accountInfo.balances.find(b => b.asset === 'USDT')?.free.toLocaleString() || 0} USDT`);

        // 6. –°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        console.log('\nü§ñ Step 6: Simulating decision-making round...');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        const universe = await mockUniverse.getUniverse({});
        const marketStats = await Promise.all(
            universe.map(symbol => mockMarketData.getMarketStats(symbol))
        );

        console.log(`‚úÖ Universe: ${universe.join(', ')}`);
        console.log(`‚úÖ Market stats: ${marketStats.length} entries`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º claims –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤
        const agentRoles = ['fundamental', 'sentiment', 'technical'] as const;
        const allClaims = [];

        for (const role of agentRoles) {
            console.log(`   Running ${role} agent...`);

            const result = await agentsService.runRole(role, {
                universe,
                facts: [],
                marketStats,
                riskProfile: config.riskProfile,
                timestamp: Date.now()
            });

            console.log(`   ‚úÖ ${role} agent generated ${result.claims.length} claims`);
            allClaims.push(...result.claims);
        }

        console.log(`‚úÖ Total claims generated: ${allClaims.length}`);

        // 7. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        console.log('\nüéØ Step 7: Building consensus...');

        const consensusService = new ConsensusService();
        const consensus = await consensusService.buildConsensus(allClaims, marketStats, config.maxPositions);

        console.log(`‚úÖ Consensus built: ${consensus.length} recommendations`);

        if (consensus.length > 0) {
            const topRecommendation = consensus[0];
            if (topRecommendation) {
                console.log(`   Top recommendation: ${topRecommendation.ticker} (score: ${topRecommendation.finalScore.toFixed(3)})`);
                console.log(`   Average confidence: ${topRecommendation.avgConfidence.toFixed(3)}`);
                console.log(`   Coverage: ${topRecommendation.coverage.toFixed(2)}`);
            }
        }

        // 8. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤
        console.log('\n‚öñÔ∏è Step 8: Building target weights...');

        const targetWeights: TargetWeight[] = consensus.map(rec => ({
            symbol: rec.ticker,
            weight: 1 / consensus.length, // Equal weight distribution
            quantity: 0, // Will be calculated during execution
            side: 'buy'
        }));

        console.log(`‚úÖ Target weights: ${targetWeights.length} positions`);
        targetWeights.forEach(weight => {
            console.log(`   ${weight.symbol}: ${(weight.weight * 100).toFixed(1)}%`);
        });

        // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
        console.log('\n‚ö†Ô∏è Step 9: Risk assessment...');

        const riskCheck = await mockRiskService.checkLimits({
            targetWeights,
            currentPositions: initialPositions,
            marketStats,
            riskProfile: config.riskProfile
        });

        console.log(`‚úÖ Risk check: ${riskCheck.ok ? 'PASSED' : 'FAILED'}`);
        if (riskCheck.violations.length > 0) {
            console.log(`   Violations: ${riskCheck.violations.length}`);
        }

        // 10. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        console.log('\nüìà Step 10: Executing trades...');

        if (riskCheck.ok) {
            const orders = [];

            for (const target of targetWeights) {
                const currentPosition = initialPositions.find(p => p.symbol === target.symbol);

                if (!currentPosition) {
                    // –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - –ø–æ–∫—É–ø–∞–µ–º
                    console.log(`   Placing BUY order for ${target.symbol}...`);

                    const orderId = await aspisAdapter.placeOrder({
                        symbol: target.symbol,
                        side: 'buy',
                        quantity: calculateQuantity(target.weight, target.symbol),
                        type: 'market'
                    });

                    console.log(`   ‚úÖ Order placed: ${orderId}`);

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
                    const order = await aspisAdapter.getOrder(orderId);
                    if (order) {
                        orders.push(order);
                        console.log(`   Order status: ${order.status}`);
                    }
                } else {
                    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
                    const currentWeight = calculateCurrentWeight(currentPosition, initialPositions);
                    const weightDiff = target.weight - currentWeight;

                    if (Math.abs(weightDiff) > 0.05) { // 5% –ø–æ—Ä–æ–≥
                        const side = weightDiff > 0 ? 'buy' : 'sell';
                        const quantity = Math.abs(calculateQuantity(Math.abs(weightDiff), target.symbol));

                        console.log(`   Placing ${side.toUpperCase()} order for ${target.symbol} (rebalancing)...`);

                        const orderId = await aspisAdapter.placeOrder({
                            symbol: target.symbol,
                            side,
                            quantity,
                            type: 'market'
                        });

                        console.log(`   ‚úÖ Rebalancing order placed: ${orderId}`);

                        const order = await aspisAdapter.getOrder(orderId);
                        if (order) orders.push(order);
                    } else {
                        console.log(`   No rebalancing needed for ${target.symbol}`);
                    }
                }
            }

            console.log(`‚úÖ Total orders placed: ${orders.length}`);
        } else {
            console.log('‚ö†Ô∏è Risk check failed - no trades executed');
        }

        // 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        console.log('\nüìä Step 11: Checking final positions...');

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));

        const finalPositions = await aspisAdapter.getPositions();
        console.log(`‚úÖ Final positions: ${finalPositions.length}`);

        finalPositions.forEach(position => {
            console.log(`   ${position.symbol}: ${position.quantity} @ $${position.avgPrice} (PnL: $${position.unrealizedPnL})`);
        });

        // 12. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        console.log('\nüìà Step 12: Portfolio metrics...');

        const portfolioMetrics = await aspisAdapter.getPortfolioMetrics();
        console.log(`‚úÖ Portfolio metrics:`);
        console.log(`   Total value: $${portfolioMetrics.totalValue.toLocaleString()}`);
        console.log(`   Available balance: $${portfolioMetrics.availableBalance.toLocaleString()}`);
        console.log(`   Unrealized PnL: $${portfolioMetrics.unrealizedPnL.toLocaleString()}`);
        console.log(`   Realized PnL: $${portfolioMetrics.realizedPnL.toLocaleString()}`);
        console.log(`   Margin level: ${portfolioMetrics.marginLevel.toFixed(2)}`);

        // 13. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîç Step 13: Data quality validation...');

        const dataQualityChecks = [
            {
                name: 'Claims Generation',
                passed: allClaims.length > 0,
                details: `${allClaims.length} claims generated`
            },
            {
                name: 'Consensus Building',
                passed: consensus.length > 0,
                details: `${consensus.length} consensus recommendations`
            },
            {
                name: 'Risk Assessment',
                passed: riskCheck.ok,
                details: riskCheck.ok ? 'Risk check passed' : 'Risk check failed'
            },
            {
                name: 'Order Execution',
                passed: true, // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –∑–Ω–∞—á–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                details: 'Orders can be placed and tracked'
            },
            {
                name: 'Position Tracking',
                passed: finalPositions.length >= 0,
                details: `${finalPositions.length} positions tracked`
            },
            {
                name: 'Portfolio Metrics',
                passed: portfolioMetrics.totalValue > 0,
                details: `Portfolio value: $${portfolioMetrics.totalValue.toLocaleString()}`
            }
        ];

        dataQualityChecks.forEach(check => {
            const status = check.passed ? '‚úÖ' : '‚ùå';
            console.log(`   ${status} ${check.name}: ${check.details}`);
        });

        const failedChecks = dataQualityChecks.filter(check => !check.passed);
        if (failedChecks.length > 0) {
            throw new Error(`Data quality validation failed: ${failedChecks.map(c => c.name).join(', ')}`);
        }

        // 14. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        console.log('\nüéØ Step 14: Integration verification...');

        const integrationChecks = [
            {
                name: 'Decision Pipeline',
                status: allClaims.length > 0 && consensus.length > 0,
                description: 'Agents ‚Üí Consensus pipeline works'
            },
            {
                name: 'Risk Management',
                status: riskCheck.ok,
                description: 'Risk assessment integrated'
            },
            {
                name: 'Trade Execution',
                status: true, // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
                description: 'AspisAdapter execution works'
            },
            {
                name: 'Position Management',
                status: finalPositions.length >= 0,
                description: 'Position tracking works'
            },
            {
                name: 'Portfolio Monitoring',
                status: portfolioMetrics.totalValue > 0,
                description: 'Portfolio metrics available'
            }
        ];

        integrationChecks.forEach(check => {
            const status = check.status ? '‚úÖ' : '‚ùå';
            console.log(`   ${status} ${check.name}: ${check.description}`);
        });

        console.log('\nüéâ Decision-Execution Integration Test PASSED!');
        console.log('\nüìä Summary:');
        console.log(`   - Claims generated: ${allClaims.length}`);
        console.log(`   - Consensus recommendations: ${consensus.length}`);
        console.log(`   - Risk assessment: ${riskCheck.ok ? 'PASSED' : 'FAILED'}`);
        console.log(`   - Positions tracked: ${finalPositions.length}`);
        console.log(`   - Portfolio value: $${portfolioMetrics.totalValue.toLocaleString()}`);
        console.log(`   - Data quality: ${dataQualityChecks.filter(c => c.passed).length}/${dataQualityChecks.length} checks passed`);
        console.log(`   - Integration: ${integrationChecks.filter(c => c.status).length}/${integrationChecks.length} checks passed`);

    } catch (error) {
        console.error('\n‚ùå Decision-Execution Integration Test FAILED!');
        console.error('Error:', error);
        throw error;
    } finally {
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
        console.log('\nüîå Disconnecting from services...');
        try {
            // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        } catch (error) {
            console.log('‚ö†Ô∏è Error during disconnection:', error);
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateQuantity(weight: number, symbol: string): number {
    // Fixed $1 USD equivalent for testing - meets minimum requirement
    const quantities: Record<string, number> = {
        'ETH': 1,    // $1 USDT -> ETH
        'ARB': 1,    // $1 USDT -> ARB
        'BTC': 1,    // $1 USDT -> BTC
        'SOL': 1,    // $1 USDT -> SOL
    };
    return quantities[symbol] || 1;
}

function calculateCurrentWeight(position: any, allPositions: any[]): number {
    const totalValue = allPositions.reduce((sum, p) => sum + Math.abs(p.quantity * p.avgPrice), 0);
    const positionValue = Math.abs(position.quantity * position.avgPrice);
    return totalValue > 0 ? positionValue / totalValue : 0;
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
    decisionExecutionIntegrationTest()
        .then(() => {
            console.log('\n‚ú® Decision-execution integration test completed successfully!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\nüí• Decision-execution integration test failed!');
            console.error(error);
            process.exit(1);
        });
}

export { decisionExecutionIntegrationTest };
